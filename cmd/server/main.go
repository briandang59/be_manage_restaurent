package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"

	"manage_restaurent/config"
	"manage_restaurent/internal/middlewares"
	"manage_restaurent/internal/model"
	"manage_restaurent/internal/routes"

	docs "manage_restaurent/docs"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Restaurant Management API
// @version 1.0
// @description API qu·∫£n l√Ω nh√† h√†ng, nh√¢n vi√™n, th·ª±c ƒë∆°n, ƒë∆°n h√†ng, file upload...
// @host localhost:8080
// @BasePath /api
func main() {
	// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
	if err := godotenv.Load(".env"); err != nil {
		log.Println("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file .env, s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng hi·ªán t·∫°i.")
	}

	// K·∫øt n·ªëi DB
	db := config.ConnectDatabase()

	// Auto migrate
	if err := db.AutoMigrate(
		&model.Customer{},
		&model.Employee{},
		&model.Availibility{},
		&model.ShiftSchedule{},
		&model.Table{},
		&model.Shift{},
		&model.MenuItem{},
		&model.Account{},
		&model.Role{},
		&model.Permission{},
		&model.Ticket{},
		&model.Ingredient{},
		&model.Attendance{},
		&model.OrderItem{},
		&model.Order{},
		&model.File{},
		&model.Category{},
		&model.Booking{},
	); err != nil {
		log.Fatal("‚ùå AutoMigrate l·ªói:", err)
	}

	// =========================================================
	// üí° LOGIC CH·∫†Y SEED DATA
	// =========================================================
	var roleCount int64
	var permCount int64
	db.Model(&model.Role{}).Count(&roleCount)
	db.Model(&model.Permission{}).Count(&permCount)

	// Ch·ªâ ch·∫°y seeding (Go code v√† SQL file) n·∫øu database tr·ªëng
	if roleCount == 0 || permCount == 0 {
		// 1. Ch·∫°y seed roles v√† permissions (Go code)
		model.SeedRolesAndPermissions(db)
		log.Println("‚úÖ ƒê√£ seed roles v√† permissions m·∫´u!")

		// 2. Ch·∫°y file SQL seed data (D·ªØ li·ªáu l·ªõn t·ª´ production/staging)

	} else {
		log.Printf("‚ÑπÔ∏è  Database ƒë√£ c√≥ d·ªØ li·ªáu (%d roles, %d perms). B·ªè qua seeding.", roleCount, permCount)
	}
	// =========================================================
	seedFilePath := "go_db_seed_data.sql"
	if err := model.RunSQLSeedFile(db, seedFilePath); err != nil {
		// L·ªói khi th·ª±c thi SQL l√† l·ªói nghi√™m tr·ªçng, d·ª´ng ·ª©ng d·ª•ng
		log.Fatalf("‚ùå L·ªói nghi√™m tr·ªçng khi ch·∫°y file seed SQL: %v", err)
	}
	// T·∫°o router
	r := gin.Default()
	r.Use(middlewares.CORSMiddleware())

	// Swagger endpoint
	docs.SwaggerInfo.BasePath = "/api"
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// ƒêƒÉng k√Ω route
	routes.RegisterRoutes(r, db)

	// L·∫•y port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
	port := os.Getenv("BE_PORT")
	if port == "" {
		port = "8080"
	}
	log.Printf("üöÄ Server ch·∫°y t·∫°i http://localhost:%s", port)
	r.Run(":" + port)
}
