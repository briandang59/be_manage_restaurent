package repository

import (
	"fmt"
	"manage_restaurent/internal/model"
	"strings"

	"gorm.io/gorm"
)

// ShiftScheduleRepo ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c t∆∞∆°ng t√°c v·ªõi b·∫£ng ShiftSchedule
type ShiftScheduleRepo interface {
	FindAll(page, pageSize int, preloadFields []string, filters map[string]interface{}) ([]model.ShiftSchedule, int64, error)
	FindByID(id uint) (*model.ShiftSchedule, error)
	Create(shiftSchedule *model.ShiftSchedule) error
	BulkCreate(shiftSchedules []model.ShiftSchedule) error
	Update(id uint, updates map[string]interface{}) error
	Delete(id uint) error
}

type shiftScheduleRepo struct {
	db *gorm.DB
}

// NewShiftScheduleRepo t·∫°o m·ªôt th·ªÉ hi·ªán m·ªõi c·ªßa ShiftScheduleRepo
func NewShiftScheduleRepo(db *gorm.DB) ShiftScheduleRepo {
	return &shiftScheduleRepo{db: db}
}

func (r *shiftScheduleRepo) FindAll(page, pageSize int, preloadFields []string, filters map[string]interface{}) ([]model.ShiftSchedule, int64, error) {
	var list []model.ShiftSchedule
	var total int64
	offset := (page - 1) * pageSize

	// üßπ B∆∞·ªõc 1: X√≥a c√°c b·∫£n ghi tr√πng l·∫∑p (c√πng employee_id, shift_id, date)
	// Gi·ªØ l·∫°i b·∫£n ghi c√≥ ID nh·ªè nh·∫•t
	if err := r.db.Exec(`
		DELETE FROM shift_schedules
		WHERE id NOT IN (
			SELECT MIN(id)
			FROM shift_schedules
			GROUP BY employee_id, shift_id, date
		)
	`).Error; err != nil {
		return nil, 0, err
	}

	// üß© B∆∞·ªõc 2: X√¢y d·ª±ng query l·∫•y d·ªØ li·ªáu
	query := r.db.Model(&model.ShiftSchedule{})
	for _, field := range preloadFields {
		query = query.Preload(field)
	}

	if shiftId, ok := filters["shift_id"]; ok {
		query = query.Where("shift_id = ?", shiftId)
	}
	if employeeId, ok := filters["employee_id"]; ok {
		query = query.Where("employee_id = ?", employeeId)
	}

	// üìä ƒê·∫øm t·ªïng s·ªë d√≤ng
	if err := query.Count(&total).Error; err != nil {
		return nil, 0, err
	}

	// üì• L·∫•y d·ªØ li·ªáu c√≥ ph√¢n trang
	if err := query.
		Limit(pageSize).
		Offset(offset).
		Find(&list).Error; err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (r *shiftScheduleRepo) FindByID(id uint) (*model.ShiftSchedule, error) {
	var shiftSchedule model.ShiftSchedule
	if err := r.db.First(&shiftSchedule, id).Error; err != nil {
		return nil, err
	}
	return &shiftSchedule, nil
}

func (r *shiftScheduleRepo) Create(shiftSchedule *model.ShiftSchedule) error {
	return r.db.Create(shiftSchedule).Error
}

func (r *shiftScheduleRepo) BulkCreate(shiftSchedules []model.ShiftSchedule) error {
	// 1. Thu th·∫≠p t·∫•t c·∫£ c√°c c·∫∑p EmployeeID v√† Date t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o
	var existingChecks []struct {
		EmployeeID uint
		Date       string
	}

	// L·∫∑p qua d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªÉ t·∫°o danh s√°ch c·∫ßn ki·ªÉm tra
	for _, schedule := range shiftSchedules {
		if schedule.EmployeeID != nil && schedule.Date != "" {
			existingChecks = append(existingChecks, struct {
				EmployeeID uint
				Date       string
			}{
				EmployeeID: *schedule.EmployeeID,
				Date:       schedule.Date,
			})
		}
	}

	if len(existingChecks) == 0 {
		return nil // Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t·∫°o
	}

	// 2. X√¢y d·ª±ng truy v·∫•n ƒë·ªÉ t√¨m c√°c b·∫£n ghi ƒë√£ t·ªìn t·∫°i
	// S·ª≠ d·ª•ng OR k·∫øt h·ª£p c√°c ƒëi·ªÅu ki·ªán (employee_id = ? AND date = ?)
	query := r.db.Model(&model.ShiftSchedule{})
	var subQueries []string
	var args []interface{}

	for _, check := range existingChecks {
		subQueries = append(subQueries, "(employee_id = ? AND date = ?)")
		args = append(args, check.EmployeeID, check.Date)
	}

	// K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒëi·ªÅu ki·ªán ph·ª• b·∫±ng OR
	whereClause := "(" + strings.Join(subQueries, " OR ") + ")"

	// 3. Truy v·∫•n DB ƒë·ªÉ l·∫•y c√°c b·∫£n ghi ƒë√£ t·ªìn t·∫°i
	var existingRecords []model.ShiftSchedule
	err := query.Where(whereClause, args...).Find(&existingRecords).Error
	if err != nil {
		return err // L·ªói khi truy v·∫•n
	}

	// 4. T·∫°o Map c√°c b·∫£n ghi ƒë√£ t·ªìn t·∫°i ƒë·ªÉ tra c·ª©u nhanh
	existingMap := make(map[string]bool)
	for _, record := range existingRecords {
		// Key: "employeeID_date" (v√≠ d·ª•: "2_2025-10-17")
		key := fmt.Sprintf("%d_%s", *record.EmployeeID, record.Date)
		existingMap[key] = true
	}

	// 5. L·ªçc danh s√°ch ƒë·∫ßu v√†o, ch·ªâ gi·ªØ l·∫°i c√°c b·∫£n ghi CH∆ØA t·ªìn t·∫°i
	var newSchedulesToCreate []model.ShiftSchedule
	for _, schedule := range shiftSchedules {
		if schedule.EmployeeID != nil && schedule.Date != "" {
			key := fmt.Sprintf("%d_%s", *schedule.EmployeeID, schedule.Date)
			if !existingMap[key] {
				newSchedulesToCreate = append(newSchedulesToCreate, schedule)
				// ƒê√°nh d·∫•u v√†o map ƒë·ªÉ tr√°nh tr√πng l·∫∑p trong ch√≠nh file ƒë·∫ßu v√†o
				existingMap[key] = true
			}
		}
	}

	if len(newSchedulesToCreate) == 0 {
		// fmt.Println("Kh√¥ng c√≥ b·∫£n ghi m·ªõi n√†o ƒë·ªÉ ch√®n.")
		return nil
	}

	// 6. Th·ª±c hi·ªán Bulk Create v·ªõi c√°c b·∫£n ghi m·ªõi
	return r.db.Create(&newSchedulesToCreate).Error
}

func (r *shiftScheduleRepo) Update(id uint, updates map[string]interface{}) error {
	return r.db.Model(&model.ShiftSchedule{}).Where("id = ?", id).Updates(updates).Error
}

func (r *shiftScheduleRepo) Delete(id uint) error {
	return r.db.Delete(&model.ShiftSchedule{}, id).Error
}
